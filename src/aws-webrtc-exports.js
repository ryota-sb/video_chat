// WARNING: DO NOT EDIT. This file is automatically generated by AWS Amplify. It will be overwritten.

const awswebrtcconfig = {
    "region": "ap-northeast-1",
    "channelArn": "arn:aws:kinesisvideo:ap-northeast-1:329395960936:channel/amplify-videochat-default-183214-SC/1593606148403"
};

import AWS from 'aws-sdk'
import { SignalingClient } from 'amazon-kinesis-video-streams-webrtc'
let endpointsByProtocol
let credentials

export async function connectSignalingChannel(role) {
    credentials = await getCredential()
    if (!credentials) return null

    const kvClient = new AWS.KinesisVideo({
        region: awswebrtcconfig.region,
        credentials: credentials,
    });
    endpointsByProtocol = await fetchEndpoints({
        kvClient,
        channelARN: awswebrtcconfig.channelArn,
        role: role
    });

    const kvsChannelsClient = new AWS.KinesisVideoSignalingChannels({
        region: awswebrtcconfig.region,
        credentials: credentials,
        endpoint: endpointsByProtocol.HTTPS,
    });
    const iceServers = await fetchTURNServers({
        kvsChannelsClient,
        channelARN: awswebrtcconfig.channelArn,
        region: awswebrtcconfig.region,
    });
    const peerConnection = new RTCPeerConnection({ iceServers });

    return peerConnection
}

export function generateSignalingClientMaster(mediaConf, peerConnection) {
    if (!credentials) return

    const EventEmitter = require('events');
    const scEmitter = new EventEmitter
    let localStream
    let remoteStream
    let peerConnectionByClientId = {}

    const signalingClient = new SignalingClient({
        channelARN: awswebrtcconfig.channelArn,
        channelEndpoint: endpointsByProtocol.WSS,
        role: 'MASTER',
        region: awswebrtcconfig.region,
        credentials: credentials,
    });

    signalingClient.on('open', async () => {
        localStream = await navigator.mediaDevices.getUserMedia(mediaConf);
        scEmitter.emit('open', localStream)
    });

    signalingClient.on('sdpOffer', async (offer, remoteClientId) => {
        scEmitter.emit('sdpOffer')
        peerConnectionByClientId[remoteClientId] = peerConnection;

        peerConnection.addEventListener('icecandidate', ({ candidate }) => {
            if (candidate) {
                scEmitter.emit('sendicecandidate')
                // console.log('[MASTER] Sending ICE candidate to client: ' + remoteClientId);
                signalingClient.sendIceCandidate(candidate, remoteClientId);
            }
        });

        peerConnection.addEventListener('track', ({ track }) => {
            // console.warn('[MASTER] Received remote track from client: ' + remoteClientId);
            remoteStream = new MediaStream([track])
            scEmitter.emit('track', remoteStream)
        });

        localStream.getTracks().forEach(track => peerConnection.addTrack(track, localStream));
        await peerConnection.setRemoteDescription(offer);

        // console.log('[MASTER] Creating SDP answer for client: ' + remoteClientId);
        await peerConnection.setLocalDescription(
            await peerConnection.createAnswer({
                offerToReceiveAudio: true,
                offerToReceiveVideo: true,
            }),
        );

        // console.log('[MASTER] Sending SDP answer to client: ' + remoteClientId);
        signalingClient.sendSdpAnswer(peerConnection.localDescription, remoteClientId);
        scEmitter.emit('sdpAnswer')
    });

    signalingClient.on('iceCandidate', async (candidate, remoteClientId) => {
        scEmitter.emit('iceCandidate')
        // console.log('[MASTER] Received ICE candidate from client: ' + remoteClientId);
        const peerConnection2 = peerConnectionByClientId[remoteClientId];
        peerConnection2.addIceCandidate(candidate);
    });

    signalingClient.on('close', () => {
        scEmitter.emit('close')
        // console.log('[MASTER] Disconnected from signaling channel');
    });

    signalingClient.on('error', () => {
        // console.error('[MASTER] Signaling client error');
    });

    return { signalingClient, scEmitter }
}


export function generateSignalingClientViewer(mediaConf, peerConnection) {
    if (!credentials) return

    const EventEmitter = require('events');
    const scEmitter = new EventEmitter
    let localStream
    let remoteStream

    const signalingClient = new SignalingClient({
        channelARN: awswebrtcconfig.channelArn,
        channelEndpoint: endpointsByProtocol.WSS,
        clientId: `c${Date.now()}`, // should be random
        role: 'VIEWER',
        region: awswebrtcconfig.region,
        credentials: credentials,
    });

    signalingClient.on('open', async () => {
        // console.log('[VIEWER] Connected to signaling service');
        localStream = await navigator.mediaDevices.getUserMedia(mediaConf);
        localStream.getTracks().forEach(track => peerConnection.addTrack(track, localStream));
        scEmitter.emit('open', localStream)

        // console.log('[VIEWER] Creating SDP offer');
        await peerConnection.setLocalDescription(
            await peerConnection.createOffer({
                offerToReceiveAudio: true,
                offerToReceiveVideo: true,
            }),
        );

        // console.log('[VIEWER] Sending SDP offer');
        signalingClient.sendSdpOffer(peerConnection.localDescription);
        scEmitter.emit('sdpOffer')
    });

    signalingClient.on('sdpAnswer', async answer => {
        scEmitter.emit('sdpAnswer')
        // console.log('[VIEWER] Received SDP answer');
        await peerConnection.setRemoteDescription(answer);
    });

    signalingClient.on('iceCandidate', candidate => {
        scEmitter.emit('iceCandidate')
        // console.log('[VIEWER] Received ICE candidate');
        peerConnection.addIceCandidate(candidate);
    });

    signalingClient.on('close', () => {
        // console.log('[VIEWER] Disconnected from signaling channel');
    });

    signalingClient.on('error', error => {
        this.displayInfo('Signaling client error: ' + error + '.')
        // console.error('[VIEWER] Signaling client error: ', error);
    });

    // Send any ICE candidates to the other peer
    peerConnection.addEventListener('icecandidate', ({ candidate }) => {
        if (candidate) {
            scEmitter.emit('icecandidate')
            // console.log('[VIEWER] Sending ICE candidate');
            signalingClient.sendIceCandidate(candidate);
        }
    });

    // As remote tracks are received, add them to the remote view
    peerConnection.addEventListener('track', event => {
        // console.log('[VIEWER] Received remote track');
        if (remoteStream) {
            return;
        }
        remoteStream = event.streams[0];
        scEmitter.emit('track', remoteStream)
    });
    return { signalingClient, scEmitter }
}

async function getCredential() {
    const Amplify = require('aws-amplify')
    try {
        await Amplify.Auth.currentAuthenticatedUser()
        const credentials = await Amplify.Auth.currentCredentials()
        const essentials = await Amplify.Auth.essentialCredentials(credentials)
        return essentials
    } catch (err) {
        return null
    }
}

async function fetchEndpoints({ kvClient, channelARN, role }) {
    const getSignalingChannelEndpointResponse = await kvClient
        .getSignalingChannelEndpoint({
            ChannelARN: channelARN,
            SingleMasterChannelEndpointConfiguration: {
                Protocols: ['WSS', 'HTTPS'],
                Role: role,
            },
        })
        .promise();

    const endpointsByProtocol = getSignalingChannelEndpointResponse.ResourceEndpointList.reduce((endpoints, endpoint) => {
        endpoints[endpoint.Protocol] = endpoint.ResourceEndpoint;
        return endpoints;
    }, {});

    return endpointsByProtocol;
}

async function fetchTURNServers({ kvsChannelsClient, channelARN, region }) {
    const getIceServerConfigResponse = await kvsChannelsClient.getIceServerConfig({ ChannelARN: channelARN }).promise();

    const iceServers = [{ urls: `stun:stun.kinesisvideo.${region}.amazonaws.com:443` }];
    getIceServerConfigResponse.IceServerList.forEach(iceServer =>
        iceServers.push({
            urls: iceServer.Uris,
            username: iceServer.Username,
            credential: iceServer.Password,
        }),
    );

    return iceServers;
}
